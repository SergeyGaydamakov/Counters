const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const Logger = require('../utils/logger');
const { MongoProvider, FactController, CounterProducer } = require('../index');
const config = require('../common/config');
const { createRoutes } = require('./routes');
const { 
    requestLogger, 
    jsonValidator, 
    irisXmlParser,
    errorHandler, 
    notFoundHandler, 
    responseMetadata 
} = require('./middleware');
const Diagnostics = require('../utils/diagnostics');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const dotenv = require('dotenv');
dotenv.config();

const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');
const app = express();

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
logger.info(`üöÄ –í–æ—Ä–∫–µ—Ä ${process.pid} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...`);
logger.info(`üìã –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: ${require.main === module ? '–ø—Ä—è–º–æ–π' : '–∫–ª–∞—Å—Ç–µ—Ä'}`);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
process.on('uncaughtException', (error) => {
    logger.error(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}:`, error.message);
    logger.error(`üìã –î–µ—Ç–∞–ª–∏:`, error);
    logger.error(`üîß –í–æ—Ä–∫–µ—Ä –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã`);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}:`, reason);
    logger.error(`üìã Promise:`, promise);
    logger.error(`üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
process.on('warning', (warning) => {
    logger.warn(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}:`, warning.message);
    logger.warn(`üìã –î–µ—Ç–∞–ª–∏:`, warning);
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
// –ö–∞–∂–¥—ã–π Worker –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
let mongoProvider = null;
let factController = null;
let mongoCounters = null;

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
    contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è API
    crossOriginEmbedderPolicy: false
}));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors(config.cors));

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// Rate limiting
// const limiter = rateLimit(config.rateLimit);
// app.use('/api/', limiter);

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –¥–ª—è IRIS –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–î–û express.json)
app.use(irisXmlParser);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
app.use(express.json({ 
    limit: config.limits.json
}));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use((error, req, res, next) => {
    if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
        logger.warn('JSON parse error:', error.message);
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç',
            message: error.message,
            timestamp: new Date().toISOString(),
            worker: process.pid
        });
    }
    next(error);
});

// –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ 
    extended: true, 
    limit: config.limits.urlencoded 
}));

// Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫ –æ—Ç–≤–µ—Ç—É
// app.use(responseMetadata);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
if (config.logging.enableRequestLogging) {
    app.use(requestLogger);
}

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
app.use(jsonValidator);

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
// –ö–∞–∂–¥—ã–π Worker —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
async function initialize() {
    try {
        logger.info(`üîå –í–æ—Ä–∫–µ—Ä ${process.pid} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...`);
        logger.info(`üìä MongoDB: ${config.database.connectionString}/${config.database.databaseName}`);
        logger.info(`üåê –ü–æ—Ä—Ç: ${config.port}`);
        logger.info(`üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
        logger.info(`   - –°—á–µ—Ç—á–∏–∫–∏: ${config.facts.counterConfigPath || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        logger.info(`   - –ü–æ–ª—è: ${config.facts.fieldConfigPath || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        logger.info(`   - –ò–Ω–¥–µ–∫—Å—ã: ${config.facts.indexConfigPath || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        logger.info(`üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è:`);
        logger.info(`   - –í–∫–ª—é—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–∞ –≤ –∏–Ω–¥–µ–∫—Å: ${config.facts.includeFactDataToIndex}`);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info(`üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:`);
        if (config.messageTypes.allowedTypes && config.messageTypes.allowedTypes.length > 0) {
            logger.info(`   - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: ${config.messageTypes.allowedTypes.join(', ')}`);
            logger.info(`   - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: ${config.messageTypes.allowedTypes.length}`);
        } else {
            logger.info(`   - –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)`);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        const diagnostics = new Diagnostics(logger);
        const diagnosticResults = await diagnostics.runFullDiagnostics(config);
        diagnostics.logDiagnostics(diagnosticResults);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        const criticalErrors = diagnosticResults.recommendations.filter(rec => rec.type === 'error');
        if (criticalErrors.length > 0) {
            logger.error(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞:`);
            criticalErrors.forEach(error => {
                logger.error(`   - ${error.message}: ${error.details}`);
            });
            throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${criticalErrors.map(e => e.message).join(', ')}`);
        }

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ Worker'–∞
        logger.info(`üîß –°–æ–∑–¥–∞—é —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—á–µ—Ç—á–∏–∫–æ–≤...`);
        mongoCounters = new CounterProducer(config.facts.counterConfigPath);
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ Worker'–∞
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É Worker'–∞–º–∏
        logger.info(`üîß –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB...`);
        mongoProvider = new MongoProvider(
            config.database.connectionString, 
            config.database.databaseName,
            config.database.options,
            mongoCounters,
            config.facts.includeFactDataToIndex
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
        const connectPromise = mongoProvider.connect();
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB (30 —Å–µ–∫—É–Ω–¥)')), 30000);
        });
        
        await Promise.race([connectPromise, timeoutPromise]);
        logger.info(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ Worker'–∞
        logger.info(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é FactController...`);
        factController = new FactController(
            mongoProvider, 
            config.facts.fieldConfigPath, 
            config.facts.indexConfigPath, 
            config.facts.targetSize,
            config.facts.includeFactDataToIndex,
            config.facts.maxDepthLimit
        );
        logger.info(`‚úÖ FactController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
        logger.info(`üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é API –º–∞—Ä—à—Ä—É—Ç—ã...`);
        app.use(createRoutes(factController));

        // 404 handler
        app.use(notFoundHandler);

        // Error handler
        app.use(errorHandler);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        logger.info(`üîß –ó–∞–ø—É—Å–∫–∞—é HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}...`);
        const server = app.listen(config.port, () => {
            logger.info(`üöÄ –í–æ—Ä–∫–µ—Ä ${process.pid} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
            logger.info(`üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${config.port}/api/v1/health`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if (process.send) {
                process.send({ type: 'worker-ready', pid: process.pid, port: config.port });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        server.on('error', (err) => {
            if (err.code === 'EADDRINUSE') {
                logger.error(`‚ùå –ü–æ—Ä—Ç ${config.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º`);
                logger.error(`üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: netstat -an | findstr :${config.port}`);
            } else {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:`, err.message);
            }
            process.exit(1);
        });

        // Graceful shutdown
        // –ö–∞–∂–¥—ã–π Worker –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–æ —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º MongoProvider
        const gracefulShutdown = async (signal) => {
            logger.info(`üì° –í–æ—Ä–∫–µ—Ä ${process.pid} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...`);
            
            server.close(async () => {
                if (mongoProvider) {
                    try {
                        await mongoProvider.disconnect();
                        logger.info(`‚úÖ MongoDB –æ—Ç–∫–ª—é—á–µ–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);
                    } catch (error) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç MongoDB:`, error.message);
                    }
                }
                logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
                process.exit(0);
            });
        };

        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ ${process.pid}:`, error.message);
        logger.error(`üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`);
        logger.error(`   - –¢–∏–ø: ${error.constructor.name}`);
        logger.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
        logger.error(`   - –ö–æ–¥: ${error.code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ–± –æ—à–∏–±–∫–µ
        if (process.send) {
            process.send({ 
                type: 'worker-error', 
                pid: process.pid, 
                error: error.message,
                code: error.code
            });
        }
        
        if (error.code === 'ECONNREFUSED') {
            logger.error(`üîß MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            logger.error(`   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ MongoDB: netstat -an | findstr :27020`);
            logger.error(`   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${config.database.connectionString}`);
            logger.error(`   3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞ MongoDB`);
        } else if (error.code === 'EADDRINUSE') {
            logger.error(`üîß –ü–æ—Ä—Ç ${config.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            logger.error(`   1. –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: netstat -an | findstr :${config.port}`);
            logger.error(`   2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã`);
        } else if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
            logger.error(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
            logger.error(`   1. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
            logger.error(`   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
            logger.error(`   3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º`);
        }
        
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    initialize();
} else {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å (–≤ –∫–ª–∞—Å—Ç–µ—Ä–µ), —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initialize();
}
