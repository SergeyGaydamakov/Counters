const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const Logger = require('../utils/logger');
const { MongoProvider, FactController } = require('../index');
const config = require('../utils/config');
const { createRoutes } = require('./routes');
const { 
    requestLogger, 
    jsonValidator, 
    errorHandler, 
    notFoundHandler, 
    responseMetadata 
} = require('./middleware');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const dotenv = require('dotenv');
dotenv.config();

const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');
const app = express();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
let mongoProvider = null;
let factController = null;

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
    contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è API
    crossOriginEmbedderPolicy: false
}));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors(config.cors));

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// Rate limiting
const limiter = rateLimit(config.rateLimit);
app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
app.use(express.json({ 
    limit: config.limits.json
}));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use((error, req, res, next) => {
    if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
        logger.warn('JSON parse error:', error.message);
        return res.status(400).json({
            success: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç',
            message: error.message,
            timestamp: new Date().toISOString(),
            worker: process.pid
        });
    }
    next(error);
});

// –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ 
    extended: true, 
    limit: config.limits.urlencoded 
}));

// Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫ –æ—Ç–≤–µ—Ç—É
app.use(responseMetadata);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
if (config.logging.enableRequestLogging) {
    app.use(requestLogger);
}

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
app.use(jsonValidator);

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initialize() {
    try {
        logger.info(`üîå –í–æ—Ä–∫–µ—Ä ${process.pid} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...`);
        logger.info(`üìä MongoDB: ${config.database.connectionString}/${config.database.databaseName}`);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        mongoProvider = new MongoProvider(
            config.database.connectionString, 
            config.database.databaseName
        );
        await mongoProvider.connect();
        logger.info(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ñ–∞–∫—Ç–æ–≤
        factController = new FactController(
            mongoProvider, 
            config.facts.fieldConfigPath, 
            config.facts.indexConfigPath, 
            config.facts.targetSize
        );
        logger.info(`‚úÖ FactController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
        app.use(createRoutes(factController));

        // 404 handler
        app.use(notFoundHandler);

        // Error handler
        app.use(errorHandler);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        const server = app.listen(config.port, () => {
            logger.info(`üöÄ –í–æ—Ä–∫–µ—Ä ${process.pid} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
        });

        // Graceful shutdown
        const gracefulShutdown = async (signal) => {
            logger.info(`üì° –í–æ—Ä–∫–µ—Ä ${process.pid} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...`);
            
            server.close(async () => {
                if (mongoProvider) {
                    await mongoProvider.disconnect();
                    logger.info(`‚úÖ MongoDB –æ—Ç–∫–ª—é—á–µ–Ω –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}`);
                }
                logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
                process.exit(0);
            });
        };

        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ ${process.pid}:`, error);
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    initialize();
}
