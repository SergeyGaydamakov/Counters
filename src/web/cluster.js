const cluster = require('cluster');
const os = require('os');
const Logger = require('../utils/logger');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const dotenv = require('dotenv');
dotenv.config();

const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU —è–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
const numCPUs = process.env.CLUSTER_WORKERS || os.cpus().length;

if (cluster.isMaster) {
    logger.info(`üöÄ Master –ø—Ä–æ—Ü–µ—Å—Å ${process.pid} –∑–∞–ø—É—â–µ–Ω`);
    logger.info(`‚öôÔ∏è  –°–æ–∑–¥–∞—é ${numCPUs} –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤`);

    // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    for (let i = 0; i < numCPUs; i++) {
        const worker = cluster.fork();
        logger.info(`üë∑ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} —Å–æ–∑–¥–∞–Ω`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    cluster.on('exit', (worker, code, signal) => {
        if (signal) {
            logger.warn(`‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`);
        } else if (code !== 0) {
            logger.error(`‚ùå –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        } else {
            logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        }

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
        if (!worker.exitedAfterDisconnect) {
            logger.info(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤–æ—Ä–∫–µ—Ä...`);
            const newWorker = cluster.fork();
            logger.info(`üë∑ –ù–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä ${newWorker.process.pid} —Å–æ–∑–¥–∞–Ω`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGTERM', () => {
        logger.info('üì° –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...');
        for (const id in cluster.workers) {
            cluster.workers[id].kill();
        }
    });

    process.on('SIGINT', () => {
        logger.info('üì° –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...');
        for (const id in cluster.workers) {
            cluster.workers[id].kill();
        }
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    setInterval(() => {
        const workers = Object.keys(cluster.workers).length;
        logger.info(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${workers}`);
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

} else {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    // –ö–∞–∂–¥—ã–π Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ Node.js
    // –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã MongoProvider, FactController –∏ CounterProducer
    require('./worker.js');
}
