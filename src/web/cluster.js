const cluster = require('cluster');
const os = require('os');
const Logger = require('../utils/logger');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const dotenv = require('dotenv');
dotenv.config();

const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU —è–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
const numCPUs = process.env.CLUSTER_WORKERS || os.cpus().length;

if (cluster.isMaster) {
    logger.info(`üöÄ Master –ø—Ä–æ—Ü–µ—Å—Å ${process.pid} –∑–∞–ø—É—â–µ–Ω`);
    logger.info(`‚öôÔ∏è  –°–æ–∑–¥–∞—é ${numCPUs} –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const config = require('../common/config');
    logger.info(`üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:`);
    if (config.messageTypes.allowedTypes && config.messageTypes.allowedTypes.length > 0) {
        logger.info(`   - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã: ${config.messageTypes.allowedTypes.join(', ')}`);
        logger.info(`   - –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: ${config.messageTypes.allowedTypes.length}`);
    } else {
        logger.info(`   - –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)`);
    }

    // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    for (let i = 0; i < numCPUs; i++) {
        try {
            logger.info(`üîß –°–æ–∑–¥–∞—é –≤–æ—Ä–∫–µ—Ä ${i + 1}/${numCPUs}...`);
            const worker = cluster.fork();
            logger.info(`üë∑ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} —Å–æ–∑–¥–∞–Ω`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            worker.on('error', (err) => {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ ${worker.process.pid}:`, err.message);
                logger.error(`üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, err);
            });
            
            worker.on('disconnect', () => {
                logger.warn(`‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
            worker.on('message', (msg) => {
                if (msg.type === 'worker-ready') {
                    logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
                } else if (msg.type === 'worker-error') {
                    logger.error(`‚ùå –í–æ—Ä–∫–µ—Ä ${worker.process.pid} —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ:`, msg.error);
                }
            });
            
        } catch (error) {
            logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ—Ä–∫–µ—Ä ${i + 1}:`, error.message);
            logger.error(`üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é`);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤
    cluster.on('exit', (worker, code, signal) => {
        const workerInfo = `–í–æ—Ä–∫–µ—Ä ${worker.process.pid}`;
        
        if (signal) {
            logger.warn(`‚ö†Ô∏è  ${workerInfo} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`);
            logger.info(`üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞ ${signal}:`);
            logger.info(`   - SIGTERM: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞`);
            logger.info(`   - SIGINT: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)`);
            logger.info(`   - SIGKILL: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã`);
        } else if (code !== 0) {
            logger.error(`‚ùå ${workerInfo} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ ${code}`);
            logger.error(`üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ ${code}:`);
            
            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ Windows
            switch (code) {
                case 3221225786:
                    logger.error(`   üîç –ö–æ–¥ 3221225786 (0xC0000005): –ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏`);
                    logger.error(`   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
                    logger.error(`      - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ MongoDB`);
                    logger.error(`      - –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö`);
                    logger.error(`      - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤`);
                    logger.error(`      - –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤ –∏–ª–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
                    break;
                case 3221226505:
                    logger.error(`   üîç –ö–æ–¥ 3221226505 (0xC0000135): –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    logger.error(`   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
                    logger.error(`      - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js`);
                    logger.error(`      - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω—ã —Ñ–∞–π–ª—ã node_modules`);
                    logger.error(`      - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Ç—è–º–∏ –∫ –º–æ–¥—É–ª—è–º`);
                    break;
                case 3221225477:
                    logger.error(`   üîç –ö–æ–¥ 3221225477 (0xC0000005): –ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞`);
                    logger.error(`   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
                    logger.error(`      - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º`);
                    logger.error(`      - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º`);
                    logger.error(`      - –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏`);
                    break;
                default:
                    logger.error(`   üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏: ${code}`);
                    logger.error(`   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`);
            }
            
            logger.error(`üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:`);
            logger.error(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: mongodb://admin:admin@localhost:27020`);
            logger.error(`   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
            logger.error(`   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 3000: netstat -an | findstr :3000`);
            logger.error(`   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: npm run start:worker`);
        } else {
            logger.info(`‚úÖ ${workerInfo} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        }

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        if (!worker.exitedAfterDisconnect && !isShuttingDown) {
            logger.info(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤–æ—Ä–∫–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
            setTimeout(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if (isShuttingDown) {
                    logger.info(`‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞`);
                    return;
                }
                
                try {
                    const newWorker = cluster.fork();
                    logger.info(`üë∑ –ù–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä ${newWorker.process.pid} —Å–æ–∑–¥–∞–Ω`);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    newWorker.on('error', (err) => {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º –≤–æ—Ä–∫–µ—Ä–µ ${newWorker.process.pid}:`, err.message);
                        logger.error(`üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, err);
                    });
                } catch (error) {
                    logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä:`, error.message);
                    logger.error(`üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é`);
                }
            }, 2000);
        } else if (isShuttingDown) {
            logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö graceful shutdown`);
        }
    });

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    let isShuttingDown = false;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const gracefulShutdown = (signal) => {
        if (isShuttingDown) {
            logger.warn(`‚ö†Ô∏è  –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—é —Å–∏–≥–Ω–∞–ª ${signal}`);
            return;
        }
        
        isShuttingDown = true;
        logger.info(`üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã...`);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
        cluster.removeAllListeners('exit');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
        const workerIds = Object.keys(cluster.workers);
        if (workerIds.length === 0) {
            logger.info('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
            process.exit(0);
            return;
        }
        
        logger.info(`üîß –ó–∞–≤–µ—Ä—à–∞—é ${workerIds.length} –≤–æ—Ä–∫–µ—Ä–æ–≤...`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–º –≤–æ—Ä–∫–µ—Ä–∞–º
        workerIds.forEach(id => {
            const worker = cluster.workers[id];
            if (worker && !worker.isDead()) {
                logger.info(`üì° –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä—É ${worker.process.pid}`);
                worker.kill(signal);
            }
        });
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        let completedWorkers = 0;
        const checkCompletion = () => {
            const activeWorkers = Object.keys(cluster.workers).filter(id => !cluster.workers[id].isDead());
            if (activeWorkers.length === 0) {
                logger.info('‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
                process.exit(0);
            } else if (completedWorkers >= workerIds.length) {
                logger.warn(`‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ${activeWorkers.length} –≤–æ—Ä–∫–µ—Ä–æ–≤`);
                activeWorkers.forEach(id => {
                    cluster.workers[id].kill('SIGKILL');
                });
                setTimeout(() => process.exit(0), 1000);
            }
        };
        
        // –°–ª—É—à–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
        cluster.on('exit', (worker, code, signal) => {
            completedWorkers++;
            logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥: ${code}, —Å–∏–≥–Ω–∞–ª: ${signal})`);
            checkCompletion();
        });
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
            logger.warn('‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ—Ä–∫–µ—Ä—ã');
            Object.keys(cluster.workers).forEach(id => {
                if (!cluster.workers[id].isDead()) {
                    cluster.workers[id].kill('SIGKILL');
                }
            });
            setTimeout(() => process.exit(1), 2000);
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ Ctrl+C –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let sigintCount = 0;
    let sigintTimer = null;

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => {
        sigintCount++;
        
        if (sigintCount === 1) {
            logger.info('üì° –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–≤—ã–π SIGINT (Ctrl+C), –Ω–∞—á–∏–Ω–∞—é graceful shutdown...');
            logger.info('üí° –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –µ—â–µ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥');
            gracefulShutdown('SIGINT');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            sigintTimer = setTimeout(() => {
                sigintCount = 0;
                logger.info('‚úÖ –°—á–µ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω');
            }, 3000);
        } else if (sigintCount >= 2) {
            logger.warn('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –≤—Ç–æ—Ä–æ–π SIGINT (Ctrl+C), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
            if (sigintTimer) {
                clearTimeout(sigintTimer);
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            Object.keys(cluster.workers).forEach(id => {
                if (!cluster.workers[id].isDead()) {
                    cluster.workers[id].kill('SIGKILL');
                }
            });
            
            setTimeout(() => {
                logger.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
                process.exit(1);
            }, 1000);
        }
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const monitoringInterval = setInterval(() => {
        if (isShuttingDown) {
            clearInterval(monitoringInterval);
            return;
        }
        
        const workers = Object.keys(cluster.workers).length;
        logger.info(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: ${workers}`);
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

} else {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    // –ö–∞–∂–¥—ã–π Worker —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ Node.js
    // –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã MongoProvider, FactController –∏ CounterProducer
    require('./worker.js');
}
