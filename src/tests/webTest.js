const http = require('http');
const logger = require('../utils/logger');
const config = require('../common/config');
const { MongoProvider, CounterProducer } = require('../index');

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Web API
 * 
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:
 * - –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ API (messageType, factId, counters, processingTime, debug)
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - XML –æ—Ç–≤–µ—Ç—ã –¥–ª—è IRIS endpoint
 * - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
class ApiTester {
    constructor(baseUrl = 'http://localhost:3000') {
        this.baseUrl = baseUrl;
        this.logger = logger.fromEnv('LOG_LEVEL', 'INFO');

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        this.countersConfig = [
            {
                name: "test_counter",
                comment: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫",
                indexTypeName: "test_type_1",
                computationConditions: {},
                evaluationConditions: null,
                attributes: {
                    "count": { "$sum": 1 }
                }
            }
        ];
        this.mongoCounters = new CounterProducer(this.countersConfig);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
     */
    async makeRequest(method, path, data = null, xmlData = false) {
        return new Promise((resolve, reject) => {
            const url = new URL(path, this.baseUrl);
            const options = {
                hostname: url.hostname,
                port: url.port,
                path: url.pathname + url.search,
                method: method,
                headers: {
                    'Content-Type': xmlData ? 'application/xml' : 'application/json'
                }
            };

            if (data) {
                const jsonData = xmlData ? data : JSON.stringify(data);
                options.headers['Content-Length'] = Buffer.byteLength(jsonData);
            }

            const req = http.request(options, (res) => {
                let responseData = '';

                res.on('data', (chunk) => {
                    responseData += chunk;
                });

                res.on('end', () => {
                    try {
                        const parsedData = JSON.parse(responseData);
                        resolve({
                            statusCode: res.statusCode,
                            headers: res.headers,
                            data: parsedData
                        });
                    } catch (error) {
                        resolve({
                            statusCode: res.statusCode,
                            headers: res.headers,
                            data: responseData
                        });
                    }
                });
            });

            req.on('error', (error) => {
                this.logger.error(`HTTP Request Error: ${error.message}`, {
                    method,
                    path,
                    url: url.toString(),
                    error: error.message,
                    code: error.code
                });
                reject(error);
            });

            if (data) {
                const jsonData = xmlData ? data : JSON.stringify(data);
                req.write(jsonData);
            }

            req.end();
        });
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check
     */
    async testHealthCheck() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
        try {
            const response = await this.makeRequest('GET', '/health');
            if (response.statusCode === 200) {
                this.logger.info('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω', response.data);
                return true;
            } else {
                this.logger.error('‚ùå Health check failed', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ health check:', {
                message: error.message,
                code: error.code,
                stack: error.stack
            });
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É JSON —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async testJsonMessage(messageType = '1', messageData = null) {
        this.logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: ${messageType}`);

        let testData = messageData;

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (!testData) {
            try {
                const generateResponse = await this.makeRequest('GET', `/api/v1/message/${messageType}/json`);
                if (generateResponse.statusCode === 200) {
                    testData = generateResponse.data;
                    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    testData.id = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                    testData.amount = 99.99;
                    testData.dt = new Date().toISOString();
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            } catch (error) {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
                return false;
            }
        }

        try {
            const response = await this.makeRequest('POST', `/api/v1/message/${messageType}/json`, testData);

            if (response.statusCode === 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                const expectedFields = ['messageType', 'factId', 'counters', 'processingTime'];
                const hasAllFields = expectedFields.every(field => response.data.hasOwnProperty(field));

                if (hasAllFields) {
                    this.logger.info('‚úÖ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', {
                        messageType: response.data.messageType,
                        factId: response.data.factId,
                        countersCount: response.data.counters ? Object.keys(response.data.counters).length : 0,
                        processingTime: response.data.processingTime,
                        hasDebug: !!response.data.debug
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ JSON', {
                        received: Object.keys(response.data),
                        expected: expectedFields
                    });
                    return false;
                }
            } else {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Å–æ–æ–±—â–µ–Ω–∏—è', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç IRIS endpoint —Å XML –æ—Ç–≤–µ—Ç–æ–º
     */
    async testIrisMessage(messageType = '1') {
        this.logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IRIS —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: ${messageType}`);

        const testData = `
<IRIS Version="1" Message="ModelRequest" MessageTypeId="${messageType}" MessageId="3323123" custom="test">
<id>test_user_123</id>
<productId>R</productId>
<amount>99.99</amount>
<currency>USD</currency>
</IRIS>`;

        try {
            const response = await this.makeRequest('POST', `/api/v1/message/iris`, testData, true);

            if (response.statusCode === 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç XML
                if (typeof response.data === 'string' && response.data.includes('<IRIS')) {
                    this.logger.info('‚úÖ IRIS endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç XML –æ—Ç–≤–µ—Ç', {
                        statusCode: response.statusCode,
                        contentType: response.headers['content-type'],
                        responseLength: response.data.length,
                        containsFactId: response.data.includes('FactId'),
                        containsCounters: response.data.includes('Counters')
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå IRIS endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç XML', {
                        responseType: typeof response.data,
                        responseData: response.data
                    });
                    return false;
                }
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç IRIS endpoint', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ IRIS —Å–æ–±—ã—Ç–∏—è:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç 404 endpoint
     */
    async testNotFound() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 404 endpoint...');

        try {
            const response = await this.makeRequest('GET', '/nonexistent/endpoint');

            if (response.statusCode === 404) {
                this.logger.info('‚úÖ 404 endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', response.data);
                return true;
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è 404', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ 404 —Ç–µ—Å—Ç–∞:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é JSON
     */
    async testInvalidJson() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON...');

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON —Å –≤–∞–ª–∏–¥–Ω—ã–º messageType
            const response = await this.makeRequest('POST', '/api/v1/message/1/json', 'invalid json', true);

            if (response.statusCode === 400) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
                const hasErrorFields = response.data.success === false &&
                    response.data.error &&
                    response.data.message;

                if (hasErrorFields) {
                    this.logger.info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)', {
                        error: response.data.error,
                        message: response.data.message,
                        timestamp: response.data.timestamp
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ JSON', response.data);
                    return false;
                }
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—É—Å—Ç–æ–≥–æ messageType
     */
    async testEmptyMessageType() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ messageType...');

        try {
            const response = await this.makeRequest('POST', '/api/v1/message//json', { test: 'data' });

            if (response.statusCode === 404) {
                this.logger.info('‚úÖ –ü—É—Å—Ç–æ–π messageType –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ 404', response.data);
                return true;
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ messageType', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ messageType:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–∞—Å—Å–∏–≤–∞ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –≤ JSON
     */
    async testArrayInsteadOfObject() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞...');

        try {
            const response = await this.makeRequest('POST', '/api/v1/message/1/json', ['invalid', 'array']);

            if (response.statusCode === 400) {
                const hasErrorFields = response.data.success === false &&
                    response.data.error &&
                    response.data.message;

                if (hasErrorFields) {
                    this.logger.info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', {
                        error: response.data.error,
                        message: response.data.message
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞', response.data);
                    return false;
                }
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–∞—Å—Å–∏–≤–∞', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É (GET)
     */
    async testGenerateMessage(messageType = '1') {
        this.logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: ${messageType}`);

        try {
            const response = await this.makeRequest('GET', `/api/v1/message/${messageType}/json`);

            if (response.statusCode === 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (response.data && typeof response.data === 'object') {
                    this.logger.info('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', {
                        messageType: messageType,
                        hasMessage: !!response.data,
                        messageStructure: Object.keys(response.data),
                        messageFields: Object.keys(response.data).length
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', response.data);
                    return false;
                }
            } else {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    async testRequiredFieldsValidation(messageType = '1') {
        this.logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: ${messageType}`);

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
            const generateResponse = await this.makeRequest('GET', `/api/v1/message/${messageType}/json`);

            if (generateResponse.statusCode !== 200) {
                this.logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è', generateResponse);
                return false;
            }

            const correctMessage = generateResponse.data;
            this.logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', {
                messageType,
                fields: Object.keys(correctMessage),
                hasId: !!correctMessage.id
            });

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è id
            const messageWithoutId = { ...correctMessage };
            delete messageWithoutId.id;

            const responseWithoutId = await this.makeRequest('POST', `/api/v1/message/${messageType}/json`, messageWithoutId);

            if (responseWithoutId.statusCode === 500) {
                const hasCorrectError = responseWithoutId.data &&
                    responseWithoutId.data.message &&
                    responseWithoutId.data.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ: id');

                if (hasCorrectError) {
                    this.logger.info('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è id', {
                        error: responseWithoutId.data.error,
                        message: responseWithoutId.data.message
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è id', responseWithoutId.data);
                    return false;
                }
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è id', responseWithoutId);
                return false;
            }

        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö API
     */
    async testNewResponseFields() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö API...');

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        let testData;
        try {
            const generateResponse = await this.makeRequest('GET', '/api/v1/message/1/json');
            if (generateResponse.statusCode === 200) {
                testData = generateResponse.data;
                testData.id = `field_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                testData.amount = 50.00;
                testData.dt = new Date().toISOString();
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            return false;
        }

        try {
            const response = await this.makeRequest('POST', '/api/v1/message/1/json', testData);

            if (response.statusCode === 200) {
                const data = response.data;
                const requiredFields = ['messageType', 'factId', 'counters', 'processingTime'];
                const optionalFields = ['debug'];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                const missingRequired = requiredFields.filter(field => !data.hasOwnProperty(field));
                if (missingRequired.length > 0) {
                    this.logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', { missing: missingRequired });
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
                const typeChecks = [
                    { field: 'messageType', expected: 'string', actual: typeof data.messageType },
                    { field: 'factId', expected: 'string', actual: typeof data.factId },
                    { field: 'counters', expected: 'object', actual: typeof data.counters },
                    { field: 'processingTime', expected: 'object', actual: typeof data.processingTime }
                ];

                const typeErrors = typeChecks.filter(check => check.actual !== check.expected);
                if (typeErrors.length > 0) {
                    this.logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π', typeErrors);
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É processingTime
                if (data.processingTime && typeof data.processingTime === 'object') {
                    const hasTotal = data.processingTime.hasOwnProperty('total');
                    if (!hasTotal) {
                        this.logger.error('‚ùå processingTime –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ total');
                        return false;
                    }
                }

                this.logger.info('‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã', {
                    messageType: data.messageType,
                    factId: data.factId,
                    countersKeys: Object.keys(data.counters || {}),
                    processingTimeKeys: Object.keys(data.processingTime || {}),
                    hasDebug: !!data.debug
                });
                return true;
            } else {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 400)
     */
    async testGenerateInvalidMessage() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞...');

        try {
            const response = await this.makeRequest('GET', '/api/v1/message/999/json');

            if (response.statusCode === 400) {
                this.logger.info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', response.data);
                return true;
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é IRIS —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async testGenerateIrisMessage(messageType = '1') {
        this.logger.info(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ IRIS —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: ${messageType}`);

        try {
            const response = await this.makeRequest('GET', `/api/v1/message/${messageType}/iris`);

            if (response.statusCode === 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç XML
                if (typeof response.data === 'string' && response.data.includes('<IRIS')) {
                    this.logger.info('‚úÖ IRIS —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', {
                        messageType: messageType,
                        responseLength: response.data.length,
                        containsMessageId: response.data.includes('MessageId'),
                        containsMessageTypeId: response.data.includes('MessageTypeId')
                    });
                    return true;
                } else {
                    this.logger.error('‚ùå IRIS –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç XML', {
                        responseType: typeof response.data,
                        responseData: response.data
                    });
                    return false;
                }
            } else {
                this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ IRIS —Å–æ–æ–±—â–µ–Ω–∏—è', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ IRIS —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ XML –≤ IRIS endpoint
     */
    async testInvalidIrisXml() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ XML –≤ IRIS endpoint...');

        try {
            const response = await this.makeRequest('POST', '/api/v1/message/iris', 'invalid xml', true);

            if (response.statusCode === 400) {
                this.logger.info('‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π XML –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –æ—à–∏–±–∫–∞', response.data);
                return true;
            } else {
                this.logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ XML', response);
                return false;
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ XML:', error.message);
            return false;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥
     */
    async testDebugLogging() {
        this.logger.info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥...');
        let mongoProvider = null;

        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MongoProvider —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            mongoProvider = new MongoProvider(
                config.database.connectionString,
                'debugLoggingTestDB',
                config.database.options,
                this.mongoCounters,
                config.facts.includeFactDataToIndex,
                config.facts.lookupFacts,
                config.facts.indexBulkUpdate
            );
            await mongoProvider.connect();

            // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
            await mongoProvider.clearLogCollection();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            process.env.LOG_SAVE_FREQUENCY = '3'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é saveDebugInfoIfNeeded –∏–∑ routes.js
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–¥–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            let requestCounter = 0;
            let maxProcessingTime = null;
            let maxMetrics = null;
            let maxDebugInfo = null;
            let maxMessage = null;
            let maxFact = null;

            const saveDebugInfoIfNeeded = async (factController, message, fact, processingTime, metrics, debugInfo) => {
                try {
                    const logSaveFrequency = parseInt(process.env.LOG_SAVE_FREQUENCY || '100');

                    requestCounter++;

                    if (!maxProcessingTime || (processingTime.total > maxProcessingTime.total)) {
                        maxProcessingTime = processingTime;
                        maxMetrics = metrics;
                        maxDebugInfo = debugInfo;
                        maxMessage = message;
                        maxFact = fact;
                    }

                    if (requestCounter >= logSaveFrequency) {
                        if (maxDebugInfo && mongoProvider) {
                            const processId = process.pid;
                            await mongoProvider.saveLog(processId, maxMessage, maxFact, maxProcessingTime, maxMetrics, maxDebugInfo);

                            this.logger.info(`–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥`);
                        }

                        requestCounter = 0;
                        maxProcessingTime = null;
                        maxMetrics = null;
                        maxDebugInfo = null;
                        maxMessage = null;
                        maxFact = null;
                    }
                } catch (error) {
                    this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥:', {
                        error: error.message,
                        stack: error.stack
                    });
                }
            };

            // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø—Ä–æ—Å–∞—Ö
            const testMessages = [
                { messageType: 1, message: { t: 1, d: { id: 'test-message-id1', dt: '2025-01-01', f1: 'test-field-1' } }, fact: { _id: 'test-fact-id1', t: 1, c: new Date(), d: { amount: 100, dt: '2025-01-01' } }, processingTime: { total: 100 }, metrics: { test: 'data1' }, debugInfo: { test: 'data1' } },
                { messageType: 2, message: { t: 2, d: { id: 'test-message-id2', dt: '2025-01-01', f1: 'test-field-1' } }, fact: { _id: 'test-fact-id2', t: 2, c: new Date(), d: { amount: 200, dt: '2025-01-01' } }, processingTime: { total: 300 }, metrics: { test: 'data2' }, debugInfo: { test: 'data2' } }, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                { messageType: 3, message: { t: 3, d: { id: 'test-message-id3', dt: '2025-01-01', f1: 'test-field-1' } }, fact: { _id: 'test-fact-id3', t: 3, c: new Date(), d: { amount: 300, dt: '2025-01-01' } }, processingTime: { total: 150 }, metrics: { test: 'data3' }, debugInfo: { test: 'data3' } },
                { messageType: 4, message: { t: 4, d: { id: 'test-message-id4', dt: '2025-01-01', f1: 'test-field-1' } }, fact: { _id: 'test-fact-id4', t: 4, c: new Date(), d: { amount: 400, dt: '2025-01-01' } }, processingTime: { total: 200 }, metrics: { test: 'data4' }, debugInfo: { test: 'data4' } },
                { messageType: 5, message: { t: 5, d: { id: 'test-message-id5', dt: '2025-01-01', f1: 'test-field-1' } }, fact: { _id: 'test-fact-id5', t: 5, c: new Date(), d: { amount: 500, dt: '2025-01-01' } }, processingTime: { total: 50 }, metrics: { test: 'data5' }, debugInfo: { test: 'data5' } }
            ];

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            for (let i = 0; i < testMessages.length; i++) {
                const msg = testMessages[i];

                await saveDebugInfoIfNeeded(mongoProvider, msg.message, msg.fact, msg.processingTime, msg.metrics, msg.debugInfo);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ª–æ–≥–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            const logCount = await mongoProvider.countLogCollection();
            if (logCount === 0) {
                throw new Error('–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ª–æ–≥–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞
            const logCollection = mongoProvider._counterDb.collection(mongoProvider.LOG_COLLECTION_NAME);
            const lastLog = await logCollection.findOne({}, { sort: { c: -1 } });
            this.logger.info('–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ:', lastLog);

            if (!lastLog) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏
            if (!lastLog._id) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ _id –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            if (!lastLog.c || !(lastLog.c instanceof Date)) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ c (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è) –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            if (!lastLog.p || typeof lastLog.p !== 'string') {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ p (processId) –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            if (!lastLog.t || typeof lastLog.t !== 'object') {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ m (metrics) –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            if (!lastLog.m || typeof lastLog.m !== 'object') {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ m (metrics) –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            if (!lastLog.di || typeof lastLog.di !== 'object') {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ di (debugInfo) –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (lastLog.t.total !== 300) {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å 300, –ø–æ–ª—É—á–µ–Ω–æ ${lastLog.t.total}`);
            }

            if (lastLog.m.test !== 'data2') {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ metrics: –æ–∂–∏–¥–∞–ª–æ—Å—å data2, –ø–æ–ª—É—á–µ–Ω–æ ${lastLog.m.test}`);
            }

            if (lastLog.di.test !== 'data2') {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: –æ–∂–∏–¥–∞–ª–æ—Å—å 3, –ø–æ–ª—É—á–µ–Ω–æ ${lastLog.di.test}`);
            }

            this.logger.info('‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥ —É—Å–ø–µ—à–µ–Ω');
            return true;
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
            return false;
        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB
            try {
                if (mongoProvider) {
                    await mongoProvider.disconnect();
                }
            } catch (disconnectError) {
                this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', disconnectError.message);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
     */
    async runAllTests() {
        this.logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ API...');

        const tests = [
            { name: 'Health Check', fn: () => this.testHealthCheck() },
            { name: 'JSON Message', fn: () => this.testJsonMessage() },
            { name: 'IRIS Message', fn: () => this.testIrisMessage() },
            { name: '404 Not Found', fn: () => this.testNotFound() },
            { name: 'Invalid JSON', fn: () => this.testInvalidJson() },
            { name: 'Empty MessageType', fn: () => this.testEmptyMessageType() },
            { name: 'Array Instead of Object', fn: () => this.testArrayInsteadOfObject() },
            { name: 'Required Fields Validation', fn: () => this.testRequiredFieldsValidation() },
            { name: 'New Response Fields', fn: () => this.testNewResponseFields() },
            { name: 'Generate Message', fn: () => this.testGenerateMessage() },
            { name: 'Generate Invalid Message', fn: () => this.testGenerateInvalidMessage() },
            { name: 'Generate IRIS Message', fn: () => this.testGenerateIrisMessage() },
            { name: 'Invalid IRIS XML', fn: () => this.testInvalidIrisXml() },
            { name: 'Debug Logging', fn: () => this.testDebugLogging() }
        ];

        const results = [];

        for (const test of tests) {
            try {
                const result = await test.fn();
                results.push({ name: test.name, passed: result });
            } catch (error) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}:`, error.message);
                results.push({ name: test.name, passed: false, error: error.message });
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.logger.info('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        results.forEach(result => {
            const status = result.passed ? '‚úÖ' : '‚ùå';
            this.logger.info(`${status} ${result.name}${result.error ? ` - ${result.error}` : ''}`);
        });

        const passedCount = results.filter(r => r.passed).length;
        const totalCount = results.length;

        this.logger.info(`\nüìà –ò—Ç–æ–≥–æ: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);

        return results;
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    async performanceTest(requests = 100, concurrency = 10) {
        this.logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${requests} –∑–∞–ø—Ä–æ—Å–æ–≤, ${concurrency} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö`);

        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        let testData;
        try {
            const generateResponse = await this.makeRequest('GET', '/api/v1/message/1/json');
            if (generateResponse.statusCode === 200) {
                testData = generateResponse.data;
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                testData.id = `perf_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                testData.amount = 100.00;
                testData.dt = new Date().toISOString();
                this.logger.info('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error.message);
            return;
        }

        const startTime = Date.now();
        const results = [];

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–∞—Ç—á–∞–º–∏
        for (let i = 0; i < requests; i += concurrency) {
            const batchSize = Math.min(concurrency, requests - i);
            const batchPromises = [];

            for (let j = 0; j < batchSize; j++) {
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                const uniqueTestData = { ...testData };
                uniqueTestData.id = `perf_test_${Date.now()}_${i}_${j}_${Math.random().toString(36).substr(2, 9)}`;
                uniqueTestData.amount = Math.floor(Math.random() * 1000) + 1;

                batchPromises.push(this.makeRequest('POST', '/api/v1/message/1/json', uniqueTestData));
            }

            const batchResults = await Promise.allSettled(batchPromises);

            batchResults.forEach(result => {
                if (result.status === 'fulfilled') {
                    const response = result.value;
                    this.logger.debug(`Performance test response: ${response.statusCode}`, {
                        statusCode: response.statusCode,
                        hasData: !!response.data,
                        dataKeys: response.data ? Object.keys(response.data) : 'no data'
                    });
                    const stats = {
                        statusCode: response.statusCode,
                        hasCounters: response.data && !!response.data.counters,
                        hasProcessingTime: response.data && !!response.data.processingTime,
                        hasDebug: response.data && !!response.data.debug,
                        countersCount: response.data && response.data.counters ? Object.keys(response.data.counters).length : 0,
                        processingTimeMs: response.data && response.data.processingTime ? response.data.processingTime.total : 0
                    };
                    results.push(stats);
                } else {
                    this.logger.error(`Performance test request failed: ${result.reason.message}`);
                }
            });
        }

        const endTime = Date.now();
        const totalTime = endTime - startTime;
        const requestsPerSecond = Math.round(requests / (totalTime / 1000));

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const successfulRequests = results.filter(r => r.statusCode === 200);
        const avgProcessingTime = successfulRequests.length > 0
            ? Math.round(successfulRequests.reduce((sum, r) => sum + (r.processingTimeMs || 0), 0) / successfulRequests.length)
            : 0;
        const avgCountersCount = successfulRequests.length > 0
            ? Math.round(successfulRequests.reduce((sum, r) => sum + (r.countersCount || 0), 0) / successfulRequests.length)
            : 0;

        this.logger.info(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`);
        this.logger.info(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}ms`);
        this.logger.info(`   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${requestsPerSecond}`);
        this.logger.info(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${Math.round(totalTime / requests)}ms`);
        this.logger.info(`   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successfulRequests.length}/${requests}`);
        this.logger.info(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${avgProcessingTime}ms`);
        this.logger.info(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤: ${avgCountersCount}`);
        this.logger.info(`   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å debug: ${successfulRequests.filter(r => r.hasDebug).length}`);
    }

}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new ApiTester();

    async function runTests() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            const args = process.argv.slice(2);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            await tester.runAllTests();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            tester.logger.info('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
            await tester.performanceTest(50, 5);

        } catch (error) {
            tester.logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
        }
    }

    runTests();
}

module.exports = ApiTester;
