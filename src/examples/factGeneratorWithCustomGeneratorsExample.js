const FactGenerator = require('../generators/factGenerator');

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FactGenerator —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
const customFieldConfig = [
    {
        "src": "userId",
        "dst": "userId",
        "fact_types": [1, 2, 3],
        "generator": {
            "type": "integer",
            "min": 1000,
            "max": 9999
        }
    },
    {
        "src": "userName",
        "dst": "userName",
        "fact_types": [1, 2],
        "generator": {
            "type": "string",
            "min": 5,
            "max": 15
        }
    },
    {
        "src": "actionType",
        "dst": "actionType",
        "fact_types": [1, 2, 3],
        "generator": {
            "type": "enum",
            "values": ["login", "logout", "purchase", "view", "search", "update"]
        }
    },
    {
        "src": "eventDate",
        "dst": "eventDate",
        "fact_types": [2, 3],
        "generator": {
            "type": "date",
            "min": "2024-01-01",
            "max": "2024-12-31"
        }
    },
    {
        "src": "description",
        "dst": "description",
        "fact_types": [1, 2, 3]
        // –ë–µ–∑ generator - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (string 6-20 —Å–∏–º–≤–æ–ª–æ–≤)
    }
];

console.log('üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FactGenerator —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n');

try {
    // –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const generator = new FactGenerator(customFieldConfig);
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: [${generator._availableFields.join(', ')}]`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: [${generator._availableTypes.join(', ')}]\n`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ–≤:\n');
    
    for (let i = 1; i <= 3; i++) {
        const fact = generator.generateFact(i);
        console.log(`–§–∞–∫—Ç —Ç–∏–ø–∞ ${i}:`);
        console.log(`  ID: ${fact.i}`);
        console.log(`  –¢–∏–ø: ${fact.t}`);
        console.log(`  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${fact.c.toISOString()}`);
        console.log(`  –ü–æ–ª—è:`);
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—è —Å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ —Ç–∏–ø–∞–º–∏
        Object.keys(fact).forEach(key => {
            if (key.startsWith('f') || ['userId', 'userName', 'actionType', 'eventDate', 'description'].includes(key)) {
                const value = fact[key];
                const type = typeof value;
                if (value instanceof Date) {
                    console.log(`    ${key}: ${value.toISOString()} (Date)`);
                } else {
                    console.log(`    ${key}: "${value}" (${type})`);
                }
            }
        });
        console.log('');
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ enum –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('üé≤ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ enum –∑–Ω–∞—á–µ–Ω–∏–π (actionType):');
    const actionTypes = new Set();
    for (let i = 0; i < 20; i++) {
        const fact = generator.generateFact(1);
        actionTypes.add(fact.actionType);
    }
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${actionTypes.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: [${Array.from(actionTypes).join(', ')}]\n`);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('üìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π:');
    const userIds = [];
    const userNames = [];
    for (let i = 0; i < 10; i++) {
        const fact = generator.generateFact(1);
        userIds.push(fact.userId);
        userNames.push(fact.userName);
    }
    
    console.log(`   userId (integer 1000-9999): min=${Math.min(...userIds)}, max=${Math.max(...userIds)}`);
    console.log(`   userName (string 5-15 —Å–∏–º–≤–æ–ª–æ–≤): min=${Math.min(...userNames.map(n => n.length))}, max=${Math.max(...userNames.map(n => n.length))} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`   description (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6-20 —Å–∏–º–≤–æ–ª–æ–≤): min=${Math.min(...userNames.map(n => n.length))}, max=${Math.max(...userNames.map(n => n.length))} —Å–∏–º–≤–æ–ª–æ–≤`);
    
} catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
}
