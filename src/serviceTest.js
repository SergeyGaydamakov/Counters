// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = require('./utils/logger');
const axios = require('axios');
const MessageGenerator = require('./generators/messageGenerator');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const dotenv = require('dotenv');
dotenv.config();

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —É—Ä–æ–≤–Ω–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –∏–∑ .env
const serviceHost = process.env.SERVICE_HOST || 'http://localhost:3000';
const messageConfigPath = process.env.MESSAGE_CONFIG_PATH || 'messageConfig.json';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MessageGenerator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
let messageGenerator = null;
let availableMessageTypes = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageGenerator
function initializeMessageGenerator() {
    try {
        messageGenerator = new MessageGenerator(messageConfigPath);
        availableMessageTypes = messageGenerator.getAvailableTypes();
        logger.info('‚úì MessageGenerator —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        logger.info(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${availableMessageTypes.length} —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${messageConfigPath}`);
    } catch (error) {
        logger.error('‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageGenerator:', error.message);
        logger.error('‚úó –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1-10');
        availableMessageTypes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    }
}

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
logger.info('=== –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env ===');
logger.info('Service Host:', serviceHost);
logger.info('Message Config Path:', messageConfigPath);
logger.info('=====================================\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function gracefulShutdown(signal) {
    logger.info(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    logger.info('‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill –∫–æ–º–∞–Ω–¥–∞
process.on('SIGUSR2', () => gracefulShutdown('SIGUSR2')); // nodemon restart
process.on('uncaughtException', (error) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    gracefulShutdown('uncaughtException');
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    gracefulShutdown('unhandledRejection');
});

async function main() {
    function initProcessingTime() {
        return {
            total: {
                min: 1000000,
                max: 0,
                total: 0
            },
            generateMessage: {
                min: 1000000,
                max: 0,
                total: 0
            },
            processMessage: {
                min: 1000000,
                max: 0,
                total: 0
            },
            count: 0,
            errors: 0
        };
    }

    function updateProcessingTime(processingTime, resultProcessingTime) {
        if (!resultProcessingTime) {
            return processingTime;
        }
        
        processingTime.total.total += resultProcessingTime.total;
        processingTime.total.min = Math.min(processingTime.total.min, resultProcessingTime.total);
        processingTime.total.max = Math.max(processingTime.total.max, resultProcessingTime.total);
        
        processingTime.generateMessage.total += resultProcessingTime.generateMessage;
        processingTime.generateMessage.min = Math.min(processingTime.generateMessage.min, resultProcessingTime.generateMessage);
        processingTime.generateMessage.max = Math.max(processingTime.generateMessage.max, resultProcessingTime.generateMessage);
        
        processingTime.processMessage.total += resultProcessingTime.processMessage;
        processingTime.processMessage.min = Math.min(processingTime.processMessage.min, resultProcessingTime.processMessage);
        processingTime.processMessage.max = Math.max(processingTime.processMessage.max, resultProcessingTime.processMessage);
        
        processingTime.count++;
        return processingTime;
    }

    function printProcessingTime(processingTime) {
        logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${processingTime.count} –∑–∞–ø—Ä–æ—Å–æ–≤ (avg / min / max): ${Math.round(processingTime.total.total / processingTime.count)} –º—Å–µ–∫ / ${processingTime.total.min} –º—Å–µ–∫ / ${processingTime.total.max} –º—Å–µ–∫`);
        logger.info(`‚úì –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (avg / min / max): ${Math.round(processingTime.generateMessage.total / processingTime.count)} –º—Å–µ–∫ / ${processingTime.generateMessage.min} –º—Å–µ–∫ / ${processingTime.generateMessage.max} –º—Å–µ–∫`);
        logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (avg / min / max): ${Math.round(processingTime.processMessage.total / processingTime.count)} –º—Å–µ–∫ / ${processingTime.processMessage.min} –º—Å–µ–∫ / ${processingTime.processMessage.max} –º—Å–µ–∫`);
        if (processingTime.errors > 0) {
            logger.info(`‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${processingTime.errors}`);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function getRandomMessageType() {
        if (availableMessageTypes.length === 0) {
            logger.error('‚úó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π');
            return 1; // Fallback –∫ —Ç–∏–ø—É 1
        }
        return availableMessageTypes[Math.floor(Math.random() * availableMessageTypes.length)];
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    async function generateMessage(messageType) {
        const startTime = Date.now();
        try {
            const response = await axios.get(`${serviceHost}/api/v1/message/${messageType}/json`, {
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });
            const endTime = Date.now();
            return {
                success: true,
                data: response.data,
                time: endTime - startTime
            };
        } catch (error) {
            const endTime = Date.now();
            logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ ${messageType}:`, error.message);
            return {
                success: false,
                error: error.message,
                time: endTime - startTime
            };
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    async function processMessage(messageType, messageData) {
        const startTime = Date.now();
        try {
            const response = await axios.post(`${serviceHost}/api/v1/message/${messageType}/json`, messageData, {
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            });
            const endTime = Date.now();
            return {
                success: true,
                data: response.data,
                time: endTime - startTime
            };
        } catch (error) {
            const endTime = Date.now();
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ ${messageType}:`, error.message);
            return {
                success: false,
                error: error.message,
                time: endTime - startTime
            };
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async function runTestCycle() {
        const cycleStartTime = Date.now();
        const messageType = getRandomMessageType();
        
        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const generateResult = await generateMessage(messageType);
        if (!generateResult.success) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${generateResult.error}`,
                processingTime: {
                    total: Date.now() - cycleStartTime,
                    generateMessage: generateResult.time,
                    processMessage: 0
                }
            };
        }

        // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const processResult = await processMessage(messageType, generateResult.data);
        const totalTime = Date.now() - cycleStartTime;

        return {
            success: processResult.success,
            messageType: messageType,
            factId: processResult.success ? processResult.data.factId : null,
            processingTime: {
                total: totalTime,
                generateMessage: generateResult.time,
                processMessage: processResult.time
            },
            error: processResult.success ? null : processResult.error
        };
    }

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MessageGenerator
        initializeMessageGenerator();
        
        logger.info('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
        logger.info('Available Message Types:', availableMessageTypes.join(', '));
        logger.info('================================\n');

        let requestCount = 0;
        const CYCLE_OUTPUT = 100;
        let startCycleTime = Date.now();
        let processingTime = initProcessingTime();

        // –§—É–Ω–∫—Ü–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        async function run() {
            const result = await runTestCycle();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            processingTime = updateProcessingTime(processingTime, result.processingTime);
            
            if (!result.success) {
                processingTime.errors++;
            }

            // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ null, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            if (result.processingTime) {
                requestCount++;
            }

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ CYCLE_OUTPUT –∑–∞–ø—Ä–æ—Å–æ–≤
            if (requestCount % CYCLE_OUTPUT === 0) {
                logger.info(`‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${requestCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`);
                logger.info(`‚úì –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(CYCLE_OUTPUT / (Date.now() - startCycleTime) * 1000)} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É`);
                logger.info(`‚úì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 1 –∑–∞–ø—Ä–æ—Å–∞: ${Math.round((Date.now() - startCycleTime) / CYCLE_OUTPUT)} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥`);
                logger.info("");
                printProcessingTime(processingTime);
                logger.info("");
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                processingTime = initProcessingTime();
                startCycleTime = Date.now();
            }

            // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            setTimeout(async () => {
                await run();
            }, 0); 
        }

        logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...');
        logger.info(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É: ${serviceHost}`);
        logger.info(`üìä –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${availableMessageTypes.join(', ')}`);
        logger.info(`üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageConfigPath}`);
        logger.info('');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await run();

    } catch (error) {
        logger.error('‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { main };
