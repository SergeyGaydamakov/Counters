// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = require('./utils/logger');
const { MongoProvider, FactController } = require('./index');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const dotenv = require('dotenv');
dotenv.config();

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —É—Ä–æ–≤–Ω–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –∏–∑ .env
const connectionString = process.env.MONGODB_CONNECTION_STRING || 'mongodb://localhost:27017';
const databaseName = process.env.MONGODB_DATABASE_NAME || 'counters';

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ .env
const fieldConfigPath = process.env.FACT_FIELD_CONFIG_PATH || null;
const indexConfigPath = process.env.INDEX_CONFIG_PATH || null;
const targetSize = parseInt(process.env.FACT_TARGET_SIZE) || 500;

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
logger.info('=== –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env ===');
logger.info('MongoDB Connection String:', connectionString);
logger.info('MongoDB Database Name:', databaseName);
logger.info('Field Config Path:', fieldConfigPath);
logger.info('Index Config Path:', indexConfigPath);
logger.info('Target Size:', targetSize);
logger.info('=====================================\n');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
let mongoProvider = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function gracefulShutdown(signal) {
    logger.info(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    
    if (mongoProvider) {
        try {
            await mongoProvider.disconnect();
            logger.info('‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        } catch (error) {
            logger.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', error.message);
        }
    }
    
    logger.info('‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill –∫–æ–º–∞–Ω–¥–∞
process.on('SIGUSR2', () => gracefulShutdown('SIGUSR2')); // nodemon restart
process.on('uncaughtException', (error) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    gracefulShutdown('uncaughtException');
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    gracefulShutdown('unhandledRejection');
});

async function main(){
    function initProcessingTime(){
        return {
            total: {
                min: 1000000,
                max: 0,
                total: 0
            },
            relevantFacts: {
                min: 1000000,
                max: 0,
                total: 0
            },
            counters: {
                min: 1000000,
                max: 0,
                total: 0
            },
            saveFact: {
                min: 1000000,
                max: 0,
                total: 0
            },
            saveIndex: {
                min: 1000000,
                max: 0,
                total: 0
            },
            count: 0
        };
    }
    function updateProcessingTime(processingTime, result){
        processingTime.total.total += result.processingTime.total;
        processingTime.total.min = Math.min(processingTime.total.min, result.processingTime.total);
        processingTime.total.max = Math.max(processingTime.total.max, result.processingTime.total);
        processingTime.relevantFacts.total += result.processingTime.relevantFacts;
        processingTime.relevantFacts.min = Math.min(processingTime.relevantFacts.min, result.processingTime.relevantFacts);
        processingTime.relevantFacts.max = Math.max(processingTime.relevantFacts.max, result.processingTime.relevantFacts);
        processingTime.counters.total += result.processingTime.counters;
        processingTime.counters.min = Math.min(processingTime.counters.min, result.processingTime.counters);
        processingTime.counters.max = Math.max(processingTime.counters.max, result.processingTime.counters);
        processingTime.saveFact.total += result.processingTime.saveFact;
        processingTime.saveFact.min = Math.min(processingTime.saveFact.min, result.processingTime.saveFact);
        processingTime.saveFact.max = Math.max(processingTime.saveFact.max, result.processingTime.saveFact);
        processingTime.saveIndex.total += result.processingTime.saveIndex;
        processingTime.saveIndex.min = Math.min(processingTime.saveIndex.min, result.processingTime.saveIndex);
        processingTime.saveIndex.max = Math.max(processingTime.saveIndex.max, result.processingTime.saveIndex);
        processingTime.count++;
        return processingTime;
    }
    function printProcessingTime(processingTime){
        logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${processingTime.count} —Ñ–∞–∫—Ç–æ–≤ (avg / min / max): ${Math.round(processingTime.total.total/ processingTime.count)} –º—Å–µ–∫ / ${processingTime.total.min} –º—Å–µ–∫ / ${processingTime.total.max} –º—Å–µ–∫`);
        // logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤: ${Math.round(processingTime.relevantFacts.total/ processingTime.count)} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥`);
        logger.info(`‚úì –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ (avg / min / max): ${Math.round(processingTime.counters.total/ processingTime.count)} –º—Å–µ–∫ / ${processingTime.counters.min} –º—Å–µ–∫ / ${processingTime.counters.max} –º—Å–µ–∫`);
        logger.info(`‚úì –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ (avg / min / max): ${Math.round(processingTime.saveFact.total/ processingTime.count)} –º—Å–µ–∫ / ${processingTime.saveFact.min} –º—Å–µ–∫ / ${processingTime.saveFact.max} –º—Å–µ–∫`);
        logger.info(`‚úì –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ (avg / min / max): ${Math.round(processingTime.saveIndex.total/ processingTime.count)} –º—Å–µ–∫ / ${processingTime.saveIndex.min} –º—Å–µ–∫ / ${processingTime.saveIndex.max} –º—Å–µ–∫`);
    }
    try {
        let factCount = 0;
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        mongoProvider = new MongoProvider(connectionString, databaseName);
        await mongoProvider.connect();
            
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å dbProvider
        const factController = new FactController(mongoProvider, fieldConfigPath, indexConfigPath, targetSize);
        const CYCLE_OUTPUT = 100;
        let startCycleTime = Date.now();
        let processingTime = initProcessingTime();
        // –§—É–Ω–∫—Ü–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–ø—É—Å–∫–∞ run
        async function run(){
            const result = await factController.runWithCounters();
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–∫—Ç–æ–≤
            processingTime = updateProcessingTime(processingTime, result);

            factCount++;
            if (factCount % CYCLE_OUTPUT === 0) {
                logger.info(`‚úì –°–æ–∑–¥–∞–Ω–æ ${factCount} —Ñ–∞–∫—Ç–æ–≤`);
                logger.info(`‚úì –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: ${Math.round(CYCLE_OUTPUT / (Date.now() - startCycleTime) * 1000)} —Ñ–∞–∫—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É`);
                logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1 —Ñ–∞–∫—Ç–∞: ${Math.round((Date.now() - startCycleTime)/ CYCLE_OUTPUT)} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥`);
                logger.info("");
                printProcessingTime(processingTime);
                logger.info("");
                processingTime = initProcessingTime();
                startCycleTime = Date.now();
            }
            setTimeout(async () => {
                await run();
            }, 0);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        await run();
        
    } catch (error) {
        logger.error('‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error.message);
        if (mongoProvider) {
            await mongoProvider.disconnect();
        }
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}
