// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = require('./utils/logger');
const { MongoProvider, FactController } = require('./index');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();


// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —É—Ä–æ–≤–Ω–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –∏–∑ .env
const connectionString = process.env.MONGODB_CONNECTION_STRING || 'mongodb://localhost:27017';
const databaseName = process.env.MONGODB_DATABASE_NAME || 'CounterTest';

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ .env
const fieldCount = parseInt(process.env.FACT_FIELD_COUNT) || 23;
const typeCount = parseInt(process.env.FACT_TYPE_COUNT) || 10;
const fieldsPerType = parseInt(process.env.FACT_FIELDS_PER_TYPE) || 10;
const targetSize = parseInt(process.env.FACT_TARGET_SIZE) || 500;

// –î–∞—Ç—ã –∏–∑ .env
const fromDate = process.env.FACT_FROM_DATE ? new Date(process.env.FACT_FROM_DATE) : undefined;
const toDate = process.env.FACT_TO_DATE ? new Date(process.env.FACT_TO_DATE) : undefined;

// –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–∫—Ç–∞
const typeFieldsConfig = {
    1: ['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10'],
    2: ['f2', 'f4', 'f6', 'f8', 'f10', 'f12', 'f14', 'f16', 'f18', 'f20'],
    3: ['f3', 'f6', 'f9', 'f12', 'f15', 'f17', 'f19', 'f21', 'f22', 'f23'],
    4: ['f1', 'f5', 'f7', 'f11', 'f13', 'f15', 'f17', 'f19', 'f21', 'f23'],
    5: ['f2', 'f4', 'f8', 'f10', 'f14', 'f16', 'f18', 'f20', 'f22', 'f23'],
    6: ['f1', 'f3', 'f7', 'f9', 'f11', 'f13', 'f15', 'f17', 'f19', 'f21'],
    7: ['f2', 'f5', 'f8', 'f11', 'f14', 'f16', 'f18', 'f20', 'f22', 'f23'],
    8: ['f3', 'f6', 'f9', 'f12', 'f13', 'f15', 'f17', 'f19', 'f21', 'f22'],
    9: ['f1', 'f4', 'f7', 'f10', 'f12', 'f14', 'f16', 'f18', 'f20', 'f23'],
    10: ['f2', 'f5', 'f8', 'f11', 'f13', 'f15', 'f17', 'f19', 'f21', 'f22']
};

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
logger.debug('=== –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env ===');
logger.debug('MongoDB Connection String:', connectionString);
logger.debug('MongoDB Database Name:', databaseName);
logger.debug('Field Count:', fieldCount);
logger.debug('Type Count:', typeCount);
logger.debug('Fields Per Type:', fieldsPerType);
logger.debug('Target Size:', targetSize);
logger.debug('From Date:', fromDate ? fromDate.toISOString() : 'default');
logger.debug('To Date:', toDate ? toDate.toISOString() : 'default');
logger.debug('=====================================\n');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
let mongoProvider = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function gracefulShutdown(signal) {
    logger.info(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    
    if (mongoProvider) {
        try {
            await mongoProvider.disconnect();
            logger.info('‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        } catch (error) {
            logger.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', error.message);
        }
    }
    
    logger.info('‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill –∫–æ–º–∞–Ω–¥–∞
process.on('SIGUSR2', () => gracefulShutdown('SIGUSR2')); // nodemon restart
process.on('uncaughtException', (error) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    gracefulShutdown('uncaughtException');
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    gracefulShutdown('unhandledRejection');
});

async function main(){
    try {
        let factCount = 0;
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        mongoProvider = new MongoProvider(connectionString, databaseName);
        await mongoProvider.connect();
            
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å dbProvider
        const factController = new FactController(mongoProvider, fieldCount, typeCount, fieldsPerType, typeFieldsConfig, fromDate, toDate, targetSize);
        const CYCLE_OUTPUT = 100;
        let startCycleTime = Date.now();
        // –§—É–Ω–∫—Ü–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–ø—É—Å–∫–∞ run
        async function run(){
            await factController.run();
            factCount++;
            if (factCount % CYCLE_OUTPUT === 0) {
                logger.info(`‚úì –°–æ–∑–¥–∞–Ω–æ ${factCount} —Ñ–∞–∫—Ç–æ–≤`);
                logger.info(`‚úì –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤: ${Math.round(CYCLE_OUTPUT / (Date.now() - startCycleTime) * 1000)} —Ñ–∞–∫—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É`);
                logger.info(`‚úì –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1 —Ñ–∞–∫—Ç–∞: ${Math.round((Date.now() - startCycleTime)/ CYCLE_OUTPUT)} –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥`);
                logger.info("");
                startCycleTime = Date.now();
            }
            setTimeout(async () => {
                await run();
            }, 0);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        await run();
        
    } catch (error) {
        logger.error('‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error.message);
        if (mongoProvider) {
            await mongoProvider.disconnect();
        }
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}
