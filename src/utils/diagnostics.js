const fs = require('fs');
const path = require('path');
const net = require('net');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
class Diagnostics {
    constructor(logger) {
        this.logger = logger;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
     */
    async checkPort(port) {
        return new Promise((resolve) => {
            const server = net.createServer();
            server.listen(port, () => {
                server.once('close', () => resolve({ available: true, error: null }));
                server.close();
            });
            server.on('error', (err) => resolve({ available: false, error: err }));
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    checkFile(filePath) {
        try {
            const exists = fs.existsSync(filePath);
            const stats = exists ? fs.statSync(filePath) : null;
            return {
                exists,
                size: stats ? stats.size : 0,
                modified: stats ? stats.mtime : null,
                readable: exists ? fs.accessSync(filePath, fs.constants.R_OK) === undefined : false
            };
        } catch (error) {
            return {
                exists: false,
                error: error.message
            };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
     */
    async checkMongoDB(connectionString) {
        try {
            const { MongoClient } = require('mongodb');
            const client = new MongoClient(connectionString, {
                serverSelectionTimeoutMS: 5000,
                connectTimeoutMS: 5000
            });
            
            await client.connect();
            await client.db().admin().ping();
            await client.close();
            
            return { connected: true, error: null };
        } catch (error) {
            return { connected: false, error: error.message };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js
     */
    async checkNodeProcesses() {
        try {
            const { stdout } = await execAsync('tasklist /FI "IMAGENAME eq node.exe" /FO CSV');
            const lines = stdout.split('\n').filter(line => line.includes('node.exe'));
            return {
                count: lines.length,
                processes: lines.map(line => {
                    const parts = line.split(',');
                    return {
                        pid: parts[1]?.replace(/"/g, ''),
                        memory: parts[4]?.replace(/"/g, '')
                    };
                })
            };
        } catch (error) {
            return { count: 0, error: error.message };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
     */
    async checkPortUsage(port) {
        try {
            const { stdout } = await execAsync(`netstat -an | findstr :${port}`);
            const lines = stdout.split('\n').filter(line => line.trim());
            return {
                inUse: lines.length > 0,
                connections: lines.map(line => line.trim())
            };
        } catch (error) {
            return { inUse: false, error: error.message };
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
     */
    async runFullDiagnostics(config) {
        this.logger.info('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
        
        const results = {
            timestamp: new Date().toISOString(),
            system: {},
            configuration: {},
            services: {},
            recommendations: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        this.logger.info('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
        const memUsage = process.memoryUsage();
        results.system.memory = {
            rss: `${Math.round(memUsage.rss / 1024 / 1024)}MB`,
            heapTotal: `${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`,
            heapUsed: `${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`,
            external: `${Math.round(memUsage.external / 1024 / 1024)}MB`
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js...');
        results.system.nodeProcesses = await this.checkNodeProcesses();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        this.logger.info('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        results.configuration.files = {};
        
        if (config.facts.counterConfigPath) {
            results.configuration.files.counters = this.checkFile(config.facts.counterConfigPath);
        }
        if (config.facts.fieldConfigPath) {
            results.configuration.files.fields = this.checkFile(config.facts.fieldConfigPath);
        }
        if (config.facts.indexConfigPath) {
            results.configuration.files.indexes = this.checkFile(config.facts.indexConfigPath);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        this.logger.info('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...');
        results.services.ports = {};
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const appPortCheck = await this.checkPort(config.port);
        results.services.ports.application = {
            port: config.port,
            available: appPortCheck.available,
            error: appPortCheck.error
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
        const portUsage = await this.checkPortUsage(config.port);
        results.services.ports.application.inUse = portUsage.inUse;
        results.services.ports.application.connections = portUsage.connections;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
        this.logger.info(`üçÉ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB ${config.database.connectionString}...`);
        results.services.mongodb = await this.checkMongoDB(config.database.connectionString);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        this.generateRecommendations(results);

        return results;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    generateRecommendations(results) {
        const recommendations = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        const heapUsedMB = parseInt(results.system.memory.heapUsed);
        if (heapUsedMB > 100) {
            recommendations.push({
                type: 'warning',
                message: '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                details: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${heapUsedMB}MB heap –ø–∞–º—è—Ç–∏`,
                action: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js
        if (results.system.nodeProcesses.count > 10) {
            recommendations.push({
                type: 'warning',
                message: '–ú–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js',
                details: `–ó–∞–ø—É—â–µ–Ω–æ ${results.system.nodeProcesses.count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`,
                action: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: taskkill /f /im node.exe'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        Object.entries(results.configuration.files).forEach(([name, file]) => {
            if (!file.exists) {
                recommendations.push({
                    type: 'error',
                    message: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
                    details: file.error || '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                    action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'
                });
            } else if (!file.readable) {
                recommendations.push({
                    type: 'error',
                    message: `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É ${name}`,
                    details: '–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è',
                    action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É'
                });
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        if (!results.services.ports.application.available) {
            recommendations.push({
                type: 'error',
                message: `–ü–æ—Ä—Ç ${results.services.ports.application.port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`,
                details: results.services.ports.application.error,
                action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º'
            });
        }

        if (results.services.ports.application.inUse) {
            recommendations.push({
                type: 'warning',
                message: `–ü–æ—Ä—Ç ${results.services.ports.application.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`,
                details: `–ù–∞–π–¥–µ–Ω–æ ${results.services.ports.application.connections.length} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`,
                action: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
        if (!results.services.mongodb.connected) {
            recommendations.push({
                type: 'error',
                message: 'MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                details: results.services.mongodb.error,
                action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ MongoDB –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
            });
        }

        results.recommendations = recommendations;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥
     */
    logDiagnostics(results) {
        this.logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
        this.logger.info(`   –í—Ä–µ–º—è: ${results.timestamp}`);
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        this.logger.info('üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:');
        this.logger.info(`   –ü–∞–º—è—Ç—å: ${results.system.memory.heapUsed} heap, ${results.system.memory.rss} RSS`);
        this.logger.info(`   –ü—Ä–æ—Ü–µ—Å—Å—ã Node.js: ${results.system.nodeProcesses.count}`);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.logger.info('üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
        Object.entries(results.configuration.files).forEach(([name, file]) => {
            if (file.exists) {
                this.logger.info(`   ‚úÖ ${name}: ${file.size} –±–∞–π—Ç`);
            } else {
                this.logger.info(`   ‚ùå ${name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –°–µ—Ä–≤–∏—Å—ã
        this.logger.info('üåê –°–µ—Ä–≤–∏—Å—ã:');
        this.logger.info(`   –ü–æ—Ä—Ç ${results.services.ports.application.port}: ${results.services.ports.application.available ? '‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        this.logger.info(`   MongoDB: ${results.services.mongodb.connected ? '‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (results.recommendations.length > 0) {
            this.logger.info('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
            results.recommendations.forEach((rec, index) => {
                const icon = rec.type === 'error' ? '‚ùå' : '‚ö†Ô∏è';
                this.logger.info(`   ${icon} ${rec.message}`);
                this.logger.info(`      ${rec.details}`);
                this.logger.info(`      –î–µ–π—Å—Ç–≤–∏–µ: ${rec.action}`);
            });
        } else {
            this.logger.info('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        }
    }
}

module.exports = Diagnostics;
