#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Counter Service
 * –ó–∞–ø—É—Å–∫: node src/utils/runDiagnostics.js
 */

const Logger = require('./logger');
const Diagnostics = require('./diagnostics');
const config = require('../common/config');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const dotenv = require('dotenv');
dotenv.config();

const logger = Logger.fromEnv('LOG_LEVEL', 'INFO');

async function main() {
    try {
        logger.info('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Counter Service...');
        logger.info('='.repeat(60));
        
        const diagnostics = new Diagnostics(logger);
        const results = await diagnostics.runFullDiagnostics(config);
        
        logger.info('='.repeat(60));
        diagnostics.logDiagnostics(results);
        
        // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info('\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:');
        logger.info(JSON.stringify(results, null, 2));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        const hasErrors = results.recommendations.some(rec => rec.type === 'error');
        const hasWarnings = results.recommendations.some(rec => rec.type === 'warning');
        
        if (hasErrors) {
            logger.error('\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.');
            process.exit(1);
        } else if (hasWarnings) {
            logger.warn('\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
            process.exit(0);
        } else {
            logger.info('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.');
            process.exit(0);
        }
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
        logger.error('üìã –î–µ—Ç–∞–ª–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { main };
